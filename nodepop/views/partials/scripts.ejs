<script>
  // Obtener el token JWT del almacenamiento local
  const token = localStorage.getItem("jwtToken");

  function isTokenExpired(token) {
    const payload = JSON.parse(atob(token.split(".")[1]));
    return payload.exp < Date.now() / 1000;
  }

  function checkTokenAndAlert() {
    if (!token || isTokenExpired(token)) {
      const lang = document.documentElement.lang || "en";
      const errorMessage =
        lang === "es"
          ? "Su sesión ha caducado. Por favor, inicia sesión de nuevo."
          : "Your session has expired. Please log in again.";
      alert(errorMessage);
      window.location.href = "/login";
      return false;
    }
    return true;
  }

  document.addEventListener("DOMContentLoaded", function () {
    const forms = document.querySelectorAll("form");

    forms.forEach((form) => {
      form.addEventListener("submit", async function (event) {
        event.preventDefault();
        const formData = new FormData(form);
        const url =
          form.id === "newProductForm" ? "/api/products/anuncios" : form.action;
        const method = form.id === "newProductForm" ? "POST" : "GET";

        if (!checkTokenAndAlert()) {
          window.location.href = "/login";
          return;
        }

        const options = {
          method: method,
          headers: {
            Authorization: `Bearer ${token}`,
          },
          body: method === "POST" ? formData : null,
        };

        if (method === "GET") {
          const params = new URLSearchParams(formData);
          options.body = null;
          options.headers["Content-Type"] = "application/x-www-form-urlencoded";
          fetch(url + "?" + params.toString(), options)
            .then((response) => {
              if (response.ok) {
                return response.json();
              } else {
                throw new Error("Network response was not ok.");
              }
            })
            .then((data) => {
              if (data.results) {
                updateProductList(data.results);
              } else {
                showTemporaryMessage(
                  "No products found with the specified criteria",
                  "error"
                );
              }
            })
            .catch((error) => console.error(error));
        } else {
          fetch(url, options)
            .then((response) => {
              if (response.ok) {
                return response.json();
              } else {
                throw new Error("Network response was not ok.");
              }
            })
            .then((data) => {
              console.log(data);
              showTemporaryMessage("Product created successfully", "success");
              setTimeout(() => {
                location.reload();
              }, 1000);
            })
            .catch((error) => console.error(error));
        }
      });
    });
  });

  function updateProductList(products) {
    const productList = document.querySelector(".product-columns");
    productList.innerHTML = "<h2>Filtered Products List</h2>";
    if (products.length > 0) {
      const ul = document.createElement("ul");
      products.forEach((product) => {
        const productItem = document.createElement("li");
        productItem.innerHTML = `
          <h4>${product.name}</h4>
          <p><strong>${product.sale ? "Selling" : "Buying"}</strong></p>
          <p><strong>Price:</strong> ${product.price} €</p>
          <p><strong>Photo:</strong><br />
            <img src="/uploads/${product.photo}" alt="${
          product.name
        }" width="100" height="100" />
          </p>
          <p><strong>Tags:</strong> ${product.tags.join(", ")}</p>
          <hr />
          <button>${product.sale ? "Buy" : "Sell"}</button>
        `;
        ul.appendChild(productItem);
      });
      productList.appendChild(ul);
    } else {
      productList.innerHTML += "<p>No products found</p>";
    }
  }

  function showTemporaryMessage(message, type) {
    const messageDiv = document.createElement("div");
    messageDiv.className = `message ${type}`;
    messageDiv.textContent = message;
    document.body.appendChild(messageDiv);

    setTimeout(() => {
      messageDiv.remove();
    }, 2000);
  }
</script>
